installNewPackage("nnet")
library(nnet)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[1]], ]
test_set <- data[cv_index_list[[1]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 8, decay=5e-4, rarg = .1,
maxit = 300, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
cat("==========================================================\n\n")
cat(msg, "\n\n")
cat("==========================================================\n\n")
cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
cat("\n==========================================================\n\n")
}
installNewPackage("nnet")
library(nnet)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[1]], ]
test_set <- data[cv_index_list[[1]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 8, decay=5e-4, rang = .1,
maxit = 300, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
cat("==========================================================\n\n")
cat(msg, "\n\n")
cat("==========================================================\n\n")
cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
cat("\n==========================================================\n\n")
}
installNewPackage("nnet")
library(nnet)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[1]], ]
test_set <- data[cv_index_list[[1]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 10, decay=5e-4, rang = .1,
maxit = 300, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
cat("==========================================================\n\n")
cat(msg, "\n\n")
cat("==========================================================\n\n")
cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
cat("\n==========================================================\n\n")
}
installNewPackage("nnet")
library(nnet)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[1]], ]
test_set <- data[cv_index_list[[1]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 10, decay=5e-4, rang = .1,
maxit = 300, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
cat("==========================================================\n\n")
cat(msg, "\n\n")
cat("==========================================================\n\n")
cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
cat("\n==========================================================\n\n")
}
installNewPackage("nnet")
library(nnet)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[1]], ]
test_set <- data[cv_index_list[[1]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 10, decay=5e-4, rang = .1,
maxit = 300, trace = FALSE, softmax=TRUE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
cat("==========================================================\n\n")
cat(msg, "\n\n")
cat("==========================================================\n\n")
cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
cat("\n==========================================================\n\n")
}
installNewPackage("nnet")
library(nnet)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[fold]], ]
test_set <- data[cv_index_list[[fold]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 10, decay=5e-4, rang = .1,
maxit = 300, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
cat("==========================================================\n\n")
cat(msg, "\n\n")
cat("==========================================================\n\n")
cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
cat("\n==========================================================\n\n")
}
installNewPackage("nnet")
library(nnet)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[fold]], ]
test_set <- data[cv_index_list[[fold]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 10, decay=5e-4, rang = .1,
maxit = 200, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
cat("==========================================================\n\n")
cat(msg, "\n\n")
cat("==========================================================\n\n")
cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
cat("\n==========================================================\n\n")
}
installNewPackage("nnet")
library(nnet)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[fold]], ]
test_set <- data[cv_index_list[[fold]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 10, decay=5e-4, rang = .1,
maxit = 200, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
cat("==========================================================\n\n")
cat(msg, "\n\n")
cat("==========================================================\n\n")
cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
cat("\n==========================================================\n\n")
}
installNewPackage("nnet")
library(nnet)
for(s in 1:10000) {
set.seed(s)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[fold]], ]
test_set <- data[cv_index_list[[fold]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 10, decay=5e-4, rang = .1,
maxit = 200, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
# cat("==========================================================\n\n")
# cat(msg, "\n\n")
# cat("==========================================================\n\n")
# cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
# cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
# cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
# cat("\n==========================================================\n\n")
if(round(total_acc / k_fold, 2) > 0.86) {
print(seed)
print(data)
break
}
}
}
installNewPackage("nnet")
library(nnet)
for(s in 1:10000) {
set.seed(s)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[fold]], ]
test_set <- data[cv_index_list[[fold]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 10, decay=5e-4, rang = .1,
maxit = 200, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
# cat("==========================================================\n\n")
# cat(msg, "\n\n")
# cat("==========================================================\n\n")
# cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
# cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
# cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
# cat("\n==========================================================\n\n")
if(round(total_acc / k_fold, 2) > 0.86) {
print(seed)
print(round(total_acc / k_fold, 2))
break
}
}
}
installNewPackage("nnet")
library(nnet)
for(s in 1:10000) {
set.seed(s)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[fold]], ]
test_set <- data[cv_index_list[[fold]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 10, decay=5e-4, rang = .1,
maxit = 200, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
# cat("==========================================================\n\n")
# cat(msg, "\n\n")
# cat("==========================================================\n\n")
# cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
# cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
# cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
# cat("\n==========================================================\n\n")
if(round(total_acc / k_fold, 2) > 0.86) {
print(s)
print(round(total_acc / k_fold, 2))
break
}
}
installNewPackage("nnet")
library(nnet)
for(s in 1:10000) {
set.seed(s)
for(data in c("train_all", "train_after_fs")) {
# Intailize variables
total_acc <- 0
total_error_rate <- 0
total_AUC <- 0
# To differentiate full and feature subset model
if(data == "train_all") {
msg <- "With the full model"
data <- train_all
} else {
msg <- "After feature selection"
data <- train_after_fs
}
# Running the Neural Network with 10 - fold cross validation
# Accuracy, error, AUC are rounded off to two decimal points
for(fold in 1:k_fold) {
train_set <- data[-cv_index_list[[fold]], ]
test_set <- data[cv_index_list[[fold]], ]
# Fitting the Neural Network model
nn_fit <- nnet(as.factor(mask) ~ ., data = train_set, size = 10, decay=5e-4, rang = .1,
maxit = 200, trace = FALSE)
# Calculating Accuracy. Error, AUC
test_prediction <- predict(nn_fit, test_set, type = "class")
accuracy <- round(Accuracy(test_prediction, test_set$mask), 2)
error_rate <- 1 - accuracy
AUC <- round(AUC(test_prediction, test_set$mask), 2)
total_acc <- total_acc + accuracy
total_error_rate <- total_error_rate + error_rate
total_AUC <- total_AUC + AUC
}
# cat("==========================================================\n\n")
# cat(msg, "\n\n")
# cat("==========================================================\n\n")
# cat(paste("Overall accuracy is", round(total_acc / k_fold, 2), sep = " "), "\n\n")
# cat(paste("Overall error is", round(total_error_rate / k_fold, 2), sep =" "), "\n\n")
# cat(paste("Overall area under the curve(AUC) is", round(total_AUC / k_fold, 2), sep = " "), "\n")
# cat("\n==========================================================\n\n")
if(round(total_acc / k_fold, 2) > 0.86) {
print(s)
print(round(total_acc / k_fold, 2))
break
}
}
}
setwd("G:/MS in DS/Sem 2/PSY 5220/Problem set/PS7 classification contest")
